# Start from base image: basic linux or nvidia-cuda
ARG BASE_IMAGE
FROM ${BASE_IMAGE}
ARG TAG

# Setup Anconda Base
ENV LANG=C.UTF-8 LC_ALL=C.UTF-8
ENV PATH /opt/conda/bin:$PATH
RUN apt-get update && apt-get install -y wget vim bzip2
RUN apt-get update --fix-missing && apt-get install -y git ca-certificates 

RUN wget --quiet https://repo.anaconda.com/archive/Anaconda3-2020.11-Linux-x86_64.sh -O ~/anaconda.sh && \
    /bin/bash ~/anaconda.sh -b -p /opt/conda && \
    rm ~/anaconda.sh && \
    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
    echo ". /opt/conda/etc/profile.d/conda.sh" >> ~/.bashrc && \
    echo "conda activate base" >> ~/.bashrc

# Install basic frameworks
RUN conda install -n base pytorch cpuonly -c pytorch && \
    conda install -c anaconda tensorflow
RUN conda install -n base nb_conda waitress datashader && \
    conda install -n base -c conda-forge "nodejs>=10.0.0" jupyterlab jupyterlab-git dask-ml dask-labextension dask-xgboost "spacy==2.3.2" fbprophet pomegranate shap lime umap-learn tslearn kmodes imbalanced-learn pymc3 stumpy tqdm node2vec mlflow ipywidgets widgetsnbextension && \
    jupyter labextension install dask-labextension && \
    jupyter serverextension enable --py --sys-prefix dask_labextension --user && \
    pip install jupyter-tensorboard && \
    jupyter labextension install jupyterlab_tensorboard && \
    jupyter serverextension enable --py --sys-prefix jupyter_tensorboard && \
    jupyter tensorboard enable --user && \
    python -m spacy download en_core_web_sm
RUN pip install causalnex bocd spacytextblob==0.1.7 pyopenssl rrcf pyod
#FIX for instrumentation to use version 0.33b0
RUN pip install splunk-sdk splunk-opentelemetry[all] opentelemetry-instrumentation-fastapi==0.33b0
#RUN conda install pyg -c pyg
#RUN conda install -n base -c conda-forge 
#RUN pip install causalnex bocd spacytextblob==0.1.7
#RUN pip install pyarrow>=3.0.0 vaex>=4.0.0 causalnex bocd spacytextblob==0.1.7 spektral && \
#    pip install pyfim

RUN jupyter labextension install @jupyter-widgets/jupyterlab-manager && \
    jupyter labextension enable --py widgetsnbextension && \
    jupyter lab build && \
    jupyter lab clean && \
    apt-get update && apt-get install -y build-essential 

RUN pip install "fastapi<=0.76.0" aiofiles "uvicorn>=0.15.0,<0.16.0" "pydantic>=1.8.0,<2.0.0" pyopenssl

RUN conda clean --all -f -y && \
    find "/opt/conda" -depth \( -type f -a -name '*.pyc' -o -name '*.pyo' -o -name '*.a' -o -name '*.js.map' \) -exec rm -rf '{}' \;

RUN apt-get update && apt-get upgrade -y

RUN mkdir /dltk
# Define working directory
WORKDIR /srv

# Copy bootstrap entry point script
COPY bootstrap_fast.sh /dltk/
COPY app /dltk/app
COPY notebooks /dltk/notebooks

# Install local DSDL supporting functions
RUN mkdir /dltk/packages
COPY package-dsdlsupport/dist/dsdlsupport-1.0.0.tar.gz /dltk/packages/dsdlsupport-1.0.0.tar.gz
RUN pip install /dltk/packages/dsdlsupport-1.0.0.tar.gz

# Copy certificates generated with
# openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout dltk.key -out dltk.pem
COPY config/dltk.key /dltk/.jupyter/dltk.key
COPY config/dltk.pem /dltk/.jupyter/dltk.pem
# Copy jupyter config
COPY config/jupyter_notebook_config.py /dltk/.jupyter/jupyter_notebook_config.py
# Since JupyterLab 3 jupyter server config needs to be set
COPY config/jupyter_server_config.py /dltk/.jupyter/jupyter_server_config.py
# TODO see if it makes sense to separate it with a specific jupyter_server_config.py 
# For now: shortcut with a copy of the notebook config
# Copy jupyter notebook conversion template to export python module
COPY config/jupyter_notebook_template.tpl /dltk/.jupyter/jupyter_notebook_conversion.tpl
COPY config/null.tpl /dltk/.jupyter/null.tpl

# Handle user rights
RUN chgrp -R 0 /dltk && \
    chmod -R g=u /dltk
RUN chgrp -R 0 /srv && \
    chmod -R g=u /srv
RUN chmod g+w /etc/passwd
USER 1001

# Install additional user libraries

# Expose container port 5000 (MLTK Container Service) and 8888 (Notebook) and 6006 (Tensorboard)
EXPOSE 5000 8888 6006

# Define bootstrap as entry point to start container
ENTRYPOINT ["/dltk/bootstrap_fast.sh"]
